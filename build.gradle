buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        //jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "gradle.plugin.io.vertx:vertx-gradle-plugin:1.2.0"
        classpath "io.vertx:vertx-web:4.0.3"
        classpath "io.vertx:vertx-web-client:4.0.3"
        classpath "io.vertx:vertx-core:4.0.3"
        classpath "org.junit.jupiter:junit-jupiter-api:5.3.1"
        classpath "org.junit.vintage:junit-vintage-engine:5.3.1"
        classpath 'io.vertx:vertx-web-client:4.0.3'
        classpath 'io.vertx:vertx-junit5:4.0.3'
        classpath 'io.vertx:vertx-config:4.0.3'
        classpath 'io.vertx:vertx-config-yaml:4.0.3'
        classpath 'org.apache.logging.log4j:log4j-api:2.14.1'
        classpath 'org.apache.logging.log4j:log4j-core:2.14.1'
        classpath 'com.fasterxml.jackson.core:jackson-databind:2.0.1'
        classpath 'com.google.guava:guava:30.1.1-jre'
        classpath 'ch.qos.logback:logback-classic:1.2.3'
        classpath 'io.vertx:vertx-kafka-client:4.0.3'
        classpath 'io.fabric8:kubernetes-client:5.4.1'
    }
}
plugins{
    id "com.palantir.docker" version "0.22.1"
    id "io.vertx.vertx-plugin" version "1.2.0"
}
println "all variables"
version="1.0"
def mainclass="com.samutup.crd.content.VerticleMaster"
import java.text.*
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")
sdf.setTimeZone(TimeZone.getTimeZone("UTC"))
println "this is atm build script "+sdf.format(new Date())

int doubleit(int i){
    println i
    i * 2
    def y=i

}


doubleit(3)

repositories {
    jcenter()
    mavenCentral()
}

dependencies{
    implementation "io.vertx:vertx-web:4.0.3"
    implementation "io.vertx:vertx-web-client:4.0.3"
    implementation "io.vertx:vertx-core:4.0.3"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    implementation 'io.vertx:vertx-junit5:4.0.3'
    implementation 'io.vertx:vertx-config:4.0.3'
    implementation 'io.vertx:vertx-config-yaml:4.0.3'
    implementation 'org.apache.logging.log4j:log4j-api:2.14.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.14.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.0.1'
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    testCompileOnly 'junit:junit:4.13'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
    implementation 'io.vertx:vertx-kafka-client:4.0.3'
    implementation 'io.fabric8:kubernetes-client:5.4.1'

}
vertx {
    mainVerticle = 'org.sample.content.AtmGateVerticle'
}

test {
    useJUnitPlatform()
}
application {
    mainClass= "${mainclass}"
}
class AtmBuild {
    String locFile
}

def currDir = project.rootDir
def buildLibDir="${currDir}"+File.separator+"build"+File.separator+"libs"
def dockerDir="${currDir}"+File.separator+"docker"
def jarFile="atmpoc-"+"${project.version}-all.jar"

docker {
    //println "${currDir}"
    // println "${buildLibDir}"
    //println "${dockerDir}"
    // println "${jarFile}"
    name "samutup/${project.name}:${project.version}"
    // dockerfile project.file("${dockerDir}"+File.separator+"Dockerfile")
    files "${jarFile}"
    // CopySpec.from("${buildLibDir}").into("${dockerDir}"+File.separator+"jars")

}